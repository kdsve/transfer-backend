from __future__ import annotations

from datetime import datetime, timedelta

from fastapi import FastAPI, Depends, Header, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from sqlmodel import Session

from .config import settings
from .db import init_db, get_session
from .models import Transfer, VehicleClass
from .schemas import TransferCreate, TransferRead
from .telegram_forwarder import forward_transfer_message

# auth helpers –∏–∑ app/auth.py
from .auth import require_telegram, validate_init_data

app = FastAPI(title="Transfer API")

# === CORS: –í–°–ï–ì–î–ê –≤–∫–ª—é—á—ë–Ω (–∏–Ω–∞—á–µ preflight OPTIONS –¥–∞—Å—Ç 405) ===
# –ù–∞ –ø—Ä–æ–¥–µ –º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å –¥–æ ["https://ride-request-bot.lovable.app"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==== Lifecycle ====
@app.on_event("startup")
def on_startup() -> None:
    init_db()

# ==== Basic endpoints ====
@app.get("/")
def root():
    return {"ok": True, "service": "transfer-api"}

@app.get("/health")
def health():
    return "ok"

# ==== Business validations ====
def validate_capacity(vehicle_class: VehicleClass, pax: int) -> None:
    # minivan <= 6, –æ—Å—Ç–∞–ª—å–Ω—ã–µ <= 3
    cap = 6 if vehicle_class == VehicleClass.minivan else 3
    if pax > cap:
        raise HTTPException(
            status_code=422,
            detail=f"–î–ª—è –∫–ª–∞—Å—Å–∞ {vehicle_class} –º–∞–∫—Å–∏–º—É–º {cap} –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.",
        )

def validate_datetime(dt: datetime) -> None:
    # –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ UTC
    min_dt = datetime.utcnow() + timedelta(minutes=30)
    if dt < min_dt:
        raise HTTPException(
            status_code=422,
            detail="–î–∞—Ç–∞/–≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.",
        )

# ==== Main endpoint ====
@app.post("/transfers", response_model=TransferRead, status_code=201)
async def create_transfer(
    data: TransferCreate,
    request: Request,
    session: Session = Depends(get_session),
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –û–ë–ê –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º X-Telegram-InitData):
    x_init_1: str | None = Header(None, alias="X-Telegram-InitData"),
    x_init_2: str | None = Header(None, alias="X-Telegram-Init-Data"),
    _auth_ok = Depends(require_telegram),  # —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ initData, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω BOT_TOKEN
):
    # –ë–µ—Ä—ë–º initData –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    init_data = (x_init_1 or x_init_2 or data.telegram_init_data or "").strip()

    # –ë–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validate_capacity(data.vehicle_class, data.pax_count)
    validate_datetime(data.datetime)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    transfer = Transfer(
        departure_city=data.departure_city,
        departure_address=data.departure_address,
        arrival_city=data.arrival_city,
        arrival_address=data.arrival_address,
        datetime=data.datetime,
        vehicle_class=data.vehicle_class,
        pax_count=data.pax_count,
        luggage=data.luggage,
        child_seat=data.child_seat,
        contact_phone=data.contact_phone,
        contact_method=data.contact_method,
        comment=(data.comment or "").strip()[:300] or None,
        telegram_init_data=init_data[:4000],
    )
    session.add(transfer)
    session.commit()
    session.refresh(transfer)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç/—á–∞—Ç (best-effort)
    text = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä</b>\n"
        f"üóì <b>–ö–æ–≥–¥–∞:</b> {data.datetime.isoformat()}\n"
        f"üöó <b>–ö–ª–∞—Å—Å:</b> {data.vehicle_class}\n"
        f"üë• <b>–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {data.pax_count}  "
        f"{'üì¶ –±–∞–≥–∞–∂ ' if data.luggage else ''}{'üë∂ –∫—Ä–µ—Å–ª–æ ' if data.child_seat else ''}\n"
        f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {data.departure_city}, {data.departure_address}\n"
        f"üèÅ <b>–ö—É–¥–∞:</b> {data.arrival_city}, {data.arrival_address}\n"
        f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data.contact_phone} ({data.contact_method})\n"
        + (f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.comment}\n" if data.comment else "")
        + f"üÜî <code>{transfer.id}</code>"
    )
    try:
        await forward_transfer_message(text)
    except Exception:
        # –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        pass

    return TransferRead(id=transfer.id, status="accepted")

# ==== –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ====
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Ö–æ–¥–∏—Ç –ª–∏ initData –∏ –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –æ–Ω (—Å —É—á—ë—Ç–æ–º settings.BOT_TOKEN)
@app.post("/__debug/initdata")
async def debug_init(
    request: Request,
    x1: str | None = Header(None, alias="X-Telegram-InitData"),
    x2: str | None = Header(None, alias="X-Telegram-Init-Data"),
):
    from .config import settings  # —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BOT_TOKEN
    raw = x1 or x2
    src = "header" if raw else ""
    if not raw:
        try:
            body = await request.json()
            raw = body.get("telegram_init_data", "")
            src = "body" if raw else ""
        except Exception:
            raw = ""
    if settings.BOT_TOKEN:
        ok, info = validate_init_data(raw, settings.BOT_TOKEN)
        return {
            "source": src,
            "has_value": bool(raw),
            "valid": ok,
            "raw_len": info.get("raw_len", 0),
            "has_hash": info.get("has_hash", False),
            "calc_pref": info.get("calc_pref", ""),
            "recv_pref": info.get("recv_pref", ""),
        }
    else:
        return {"source": src, "has_value": bool(raw), "valid": "skipped(no BOT_TOKEN)"}
